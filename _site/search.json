[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "UA’s Data Literacy and Open Science Landscape\n\n\n\n\n\n\n\ndata literacy\n\n\nopen science\n\n\nUA\n\n\n\n\n\n\n\n\n\n\n\nNov 16, 2024\n\n\nEdwin Alvarado-Mena\n\n\n\n\n\n\n  \n\n\n\n\nRendering professional documents with Quarto\n\n\n\n\n\n\n\nQuarto\n\n\ncode\n\n\nLaTeX\n\n\n\n\n\n\n\n\n\n\n\nNov 15, 2024\n\n\nEdwin Alvarado-Mena\n\n\n\n\n\n\n  \n\n\n\n\nHow to organize your computer to work with data\n\n\n\n\n\n\n\nworking directory\n\n\nRStudio projects\n\n\nGitHub\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2024\n\n\nEdwin Alvarado-Mena\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "How to organize your computer",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Professional documents with Quarto",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Welcome!",
    "section": "",
    "text": "Photo: Chris Richards/University Communications\n\nSo you have been admitted to UA’s School of Government and Public Policy (SGPP). You must be proud of it!\nSGPP’s—Unofficial—Primer on Data Literacy and Open Science has posts covering three fundamental areas that you must master as a PhD student:\n\nOrganizing the computer conveniently to work with data and version control applications (e.g., GitHub).\nRendering professional documents in Quarto, including references, equations, code, visualizations, etc.\nNavigating UA’s Data Literacy and Open Science landscape.\n\nYou want to develop these skills as soon as possible. Trust me. They will make your doctoral journey more pleasant and effective.\n\nBonus track—This website is a public GitHub repository. Feel free to fork it and use it as a model for your personal website."
  },
  {
    "objectID": "posts/ua_data_literacy_open_science_landscape/index.html",
    "href": "posts/ua_data_literacy_open_science_landscape/index.html",
    "title": "UA’s Data Literacy and Open Science Landscape",
    "section": "",
    "text": "Photo: Dean Kelly/SkyPod Images\n\n\nBeing a first-year PhD student is not the easiest. You will have to learn lots of new stuff, and it is OK to feel anxious about it.\nIt is sensible to invest serious time in honing your programming skills. Solid fluency in R or Python can make your doctoral journey way more pleasant. \nBut programming is not the only flank you have to protect in the years to come. There are many other technicalities that you must pick up very quickly.\nYou will hear about \\(\\LaTeX\\). Many of your prospective co-authors write their manuscripts in \\(\\LaTeX\\), so you will suffer the misery of rendering \\(\\LaTeX\\) documents with no previous knowledge of it…\nYou will hear about GitHub. Version control tools are a must for collaborative work, so you will grapple with the arcane GitHub commands… \nYou will hear about the Unix shell. Advanced tasks like interacting with UA’s High Performance Computing (HPC) demand some computational dexterity, so you will need to master how humans communicate with computers…\nWhere to start?\n\nOpen Science\nEverything mentioned above pertains to Open Science, a hugely relevant paradigm in scientific research. The sooner you learn about it, the better.\nI pretty much like the definition coined by Jeffrey Gillan (UA’s Data Science Institute):\n\n\n“A series of reforms that interrogate every step in the research life cycle to make it more efficient, powerful and accountable in our emerging digital society.”\n\nSo Open Science interrogates the way we do science. UNESCO’s definition is way wordier but points in the same direction:\n\n“Open Science is defined as an inclusive construct that combines various movements and practices aiming to make multilingual scientific knowledge openly available, accessible and reusable for everyone, to increase scientific collaborations and sharing of information for the benefits of science and society, and to open the processes of scientific knowledge creation, evaluation and communication to societal actors beyond the traditional scientific community.”\n\nIn a nutshell, we, scientists, do science… But we do a very particular type of science: reproducible science.\nReproducibility means that our data and code are accessible, transparent, and executable. Importantly, reproducibility allows others to fully replicate our work’s results.\nWe do not merely publish our research. Rather, we share all the research materials and clearly document how we used them.\nOf course, Open Science does not happen by accident. We must take very purposeful actions in numerous realms. \nWe must excel at documentation. Our code must be well-annotated and cover each step leading to our conclusions. We must also provide guidelines for code execution. Open-source applications like OSF are great documentation tool options. In the context of GitHub repositories, a README file should be included with a detailed overview of the project workflow.\nWe must excel at project management. Our code must be contained in a GitHub repository with version control functionality, and we must share every necessary input to execute the code. Project management includes data management. UA provides access to the DMPTool to write data management plans following funding agencies’ requirements.\nWe must excel at data infrastructure. Our data and other research materials must be accessible through appropriate digital storage platforms; any third person should understand how the raw data turns into research outputs. The conditions for gathering, sharing, and archiving data must be precise. Moreover, the data must be findable, accessible, interoperable, and reusable (see: FAIR Principles). UA’s official repository is known as ReDATA.\nWe must excel at communication. Our publications should follow the best practices and standards in scientific writing. Overleaf is an online \\(\\LaTeX\\) editor for collaborative and real-time writing. Quarto allows you to combine formatted text, code, code output, \\(\\LaTeX\\) conventions, and references.\n\n\nUA’s excellent data literacy ecosystem\nAs I said at the beginning, you will have to learn lots of new stuff in the coming years!\nThe good news is that UA’s ecosystem supplies so many opportunities to hone your computational talents and engage with folks doing very cool stuff in “this R1 institution that, quite literally, puts things into space” (as Professor Peter A. Jansen says).\nHere are my top recommendations to make the most of the UA’s Open Science and Data Literacy landscape:\n\nTake advantage of University Libraries’ Data Cooperative\nUniversity Libraries’ Data Cooperative organizes weekly workshops during the semester. These lovely workshops cover everything from introductory programming to machine learning methods, from data management to data visualization. Plus, Jeff Olivier, the instructor of the R workshops instructor, is such a great guy.\nThe Data Cooperative holds open office hours, where you can bring that ugly line of code that is not running, and organizes workshops about supported platforms such as the DMPTool, OSF, and ReDATA, which I mentioned previously. Upcoming events, here.\n\n\nAttend Data Science Institute’s events\nConsider subscribing to the Data Science Institute’s email list. It is simply the best channel for information about data science events held across the campus. Have a look at the calendar!\nThe Data Science Institute also has an official newsletter, The Data Drip, and leads great outreach projects such as Data Science Ambassadors, Data Science Fellows, or Roots for Resilience.\n\n\nGet in touch with Data Science Ambassadors\nIt is likely that the College of Social & Behavioral Sciences has a Data Science Ambassador who can provide assistance with programming. You can make an appointment at any time.\nOnce you have gained some experience, nominate yourself to be the Data Science Ambassador.\n\n\nHave a look at Kelsey Gonzalez’s R programming course\nSociologist Kelsey Gonzalez earned her PhD at UA. A former Data Science Ambassador, she is now a Lead Data Scientist and AI Product Manager in the Chief Analytics Office at IBM, demonstrating that social scientists can land excellent jobs in the data science industry. \nFurthermore, PhD Kelsey Gonzalez developed an excellent course in R programming with Tidyverse. It is free and available on YouTube. You definitely want to have a look!\n\n\nExploit UA’s education partnerships\nThe Data Science Ambassadors program gives you access to the Carpentries Instructor Certification. The Roots for Resilience program gives you access to the Foundational Open Science Skills (FOSS) workshop series.\nThese education partnerships are a massive asset! Take advantage of it!\n\n\nPursue the Computational Social Science Graduate Certificate\nTaking courses beyond the SGPP will give you a stronger background. It is not to say that our methods classes are bad. Quite the opposite, our methods sequence is pretty good and provides you with the foundations to take courses in computer science, geography, statistics, and so on.\nThe Computational Social Science Graduate Certificate is a great way to turn all those credits into a nice addition to your CV. Pursue it.\n\n\nMaster the High Performance Computing\nUA has enormous computational power. Some restrictions observed, we can run jobs in the High Performance Computing. This infrastructure is nothing to sneeze at. Use it to leverage your work.\nThere is a very good collection of videos that will introduce you to UA’s supercomputers."
  },
  {
    "objectID": "posts/how_to_organize_your_computer/index.html",
    "href": "posts/how_to_organize_your_computer/index.html",
    "title": "How to organize your computer to work with data",
    "section": "",
    "text": "Photo: Chris Richards/University Communications\n\n\nYour computer cannot be a mess.\nTo efficiently work with data, you want to organize your computer in a certain way. Organizing your folders and files in that certain way will make things much more manageable.\nThe same goes for version control. To efficiently work with version control applications (do not panic if you ignore what version control is—We will talk about it soon), you want to organize your computer in a certain way.\n\nA model working directory\nDuring your doctoral studies you will crunch numbers on a daily basis. In the SGPP, we typically program in R, a programming language for data analysis.\nR users are familiar with the concept of working directory. Indeed, there is a function that prints the working directory, getwd().\nThe working directory is a folder.\nMore specifically, the working directory is the folder where you must keep all the files (e.g., that CSV file with survey data you have to analyze) and scripts (text files where you write and save your code) relevant to the project in question.\nTherefore, if you execute the getwd() function in the R console, R would print the path to the working directory, say, /Users/edwinalvarado/Documents/r_projects/unofficial_primer.\nSo, when it comes to folders and files organization, I suggest creating two folders in your computer, namely, r_projects and github_projects.\nYou could locate both folders in Documents. In my case, the two paths look like this:\n\n/Users/edwinalvarado/Documents/r_projects.\n/Users/edwinalvarado/Documents/github_projects.\n\nYou should gather in r_projects those R projects that you want to keep in your computer only. If you want to track changes using a version control tool like GitHub, the R project in question should go to github_projects.\nLet us focus on the r_projects folder.\nIn r_projects, you want to have one specific folder (i.e., a working directory!) for each course, paper, or practice you are working on.\nTo create the working directory for, say, POL 601, you follow these steps:\n\nOpen RStudio.\nClick on File &gt; New Project, which will open a new window.\nSelect New Directory.\nChoose an appropriate Directory name (use underscores instead of whitespaces), say, pol_601 or pol601.\nClick on Browse and make sure to Create project as subdirectory of the r_projects folder.\nClick on Create Project.\n\nAfter following the steps above, you will have created a new folder in r_projects.\nIn my case, the folder’s path would be like /Users/edwinalvarado/Documents/r_projects/pol601. If I access the folder, I will see a file named pol601.Rproj, which is an RStudio project.\nThe next time I have to program something related to POL 601, I just click on the RStudio project, pol601.Rproj, which will open RStudio.\nMost importantly, RStudio will open the working directory corresponding to POL 601, so I do not need to worry about setting the working directory manually.\nOK. You repeat these steps for each course, paper, or practice that comes along the way. At some point, you will have numerous working directories:\n\n/Users/edwinalvarado/Documents/r_projects/pol601.\n/Users/edwinalvarado/Documents/r_projects/pol602.\n/Users/edwinalvarado/Documents/r_projects/pol603.\n/Users/edwinalvarado/Documents/r_projects/second_year_paper.\n/Users/edwinalvarado/Documents/r_projects/comps.\n/Users/edwinalvarado/Documents/r_projects/prospectus.\n\nAnd so on…\nTo sum up, we have learned that R users organize their work around RStudio projects. We have learned how to create RStudio projects. And we have learned that creating an RStudio project results in a new working directory (i.e., a new folder) that we locate in the r_projects folders.\nThe new working directory must have a certain structure. I recommend to create three sub-folders:\n\nr_projects/pol601/data, where you store the data of interest.\nr_projects/pol601/scripts, where you store the text files with the code that loads, wrangles, tidies, models, or visualizes the data.\nr_projects/pol601/output, where you store wrangled data, model output (modeling data might be time-consuming, so you do not want to re-run models), or visualizations.\n\nIf you create a Quarto document (I have a post about it), I suggest keeping it right in the working directory, not in sub-folders.\nI shared a model working directory through GitHub. It looks like this:\n\n\n\nA model working directory\n\n\nIt is sensible to avoid deleting files. You never know if that trashy script will be useful in the future. Instead, you can create an old folder at any folder and place the old stuff there.\n\n\nGitHub integration\nOften, you want your R projects to be GitHub repositories.\nGitHub is a version control tool. Moreover, GitHub is a platform to share code with instructors, co-authors, and colleagues.\nTo keep all your GitHub repositories together, you must create a folder locally on your computer, github_projects. \nOf course, the first step is to create a GitHub account. The second step is to download GitHub Desktop.11 I suggest that you get used to running GitHub commands from the Terminal in RStudio. Using the Terminal approximates better the real-world jobs in the data science industry.\n\n\n\n\n\n\nIntro to GitHub\n\n\n\nYou need a solid introduction to Git and GitHub. My recommended resources, here and here.\n\n\nThe steps go as follows:\n\nLog in to the GitHub website.\nClick on your profile picture (upper right corner).\nClick on Your repositories.\nClick on New (green bottom) to create a new repository.\nChoose an appropriate name (say, pol601) and make sure that the repository is private.\nClick on Create repository, which will lead you to the main page of the new repository.\nClick on Code (green bottom).\nClick on Local.\nClick on Open with GitHub Desktop, which will lead you to GitHub Desktop.\nIn GitHub Desktop, click on Browse and make sure that the repository will be located in the github_projects folder.\n\nHaving reached this point, the repository should exist locally on your computer and, more specifically, in the github_projects folder.\nNow it is time to populate github_projects/pol601.\n\nOpen RStudio.\nClick on File &gt; New Project, which will open a new window.\nSelect Existing Directory (instead of New Directory, as we did it in the previous section).\nClick on Browse and make sure to choose the github_projects/pol601 folder.\nClick on Create Project.\n\nThus, you will have created a new folder in github_projects that is both an RStudio project and a GitHub repository.\nYou are all set to program great things and exploit the benefits of version control!"
  },
  {
    "objectID": "posts/professional_documents_with_quarto/index.html",
    "href": "posts/professional_documents_with_quarto/index.html",
    "title": "Rendering professional documents with Quarto",
    "section": "",
    "text": "Photo: Bob Demers/UA News\n\n\nProducing high-quality documents and reports is of paramount importance.\nMethods courses’ assignments are especially tricky as you have to combine plain text, code, and results.\nEven if you are not minoring in methods, you must take a few statistics courses along your doctoral journey.\nIn general, instructors will expect to see, say, a table with regression coefficients and other statistics. You must also discuss your data, methods, and findings.\nOK. You will then look for a text editor. Microsoft Word or Google Docs may be your immediate options.\nSo, you create a new document, write some paragraphs about the research design, and insert screenshots of the relevant figures and tables. \nScreenshots, however, do not look very professional…\nTo make things worse, instructors will also want to see code. Technical questions will be asked. How did you wrangle the data? How did you fit the models?\nTherefore, you must showcase your code.\nOnce again, you might be tempted to take screenshots of RStudio and insert them into the document.\nScreenshots, however, do not look very professional…\nWe need better solutions for scientific writing than Microsoft Word or Google Docs.\n\nA model Quarto document\nLuckily, we have Quarto!\nQuarto is an open-source tool for scientific publishing. Quarto documents can combine plain text, code, and code output. No need for screenshots!\nQuarto documents can be rendered to multiple formats, including PDF, which makes them great for assignments.\nYou can create Quarto documents in RStudio by clicking File &gt; New File &gt; Quarto Document.\nThus, RStudio will open a Quarto document where you can write, program, and render to a professionally-looking PDF document.\nYou will see YAML metadata at the top of the Quarto document that you can modify at will. This metadata provides a lot of room for customization.\nTo make things easier, I have granted you access to a GitHub repository with a model Quarto document ready to be rendered into PDF format. Feel free to use this repository as a model for your grad school work.\nNotice that the repository follows the guidelines for working directory organization that I listed in another blog post.\nAs you will see in the model repository, cool things about Quarto include printing code and code output, including references, and inserting \\(\\LaTeX\\) math.\n\n\nR vs Python? Why not both!\nYou can even combine R and Python chunks! Have a look:\n\n## This is R\ntoupper(\"hola\")\n\n[1] \"HOLA\"\n\n\n\n\n\n\n\n\nInstall package\n\n\n\nYou must install and load the reticulate package prior to running Python code: library(reticulate).\n\n\n\n## This is Python\n\"hola\".upper()\n\n'HOLA'\n\n\nFurthermore, you can call objects from an R environment while programming in a Python chunk, and vice-versa, which means that you can build “bilingual” workflows:\n\n## This is R\nstring &lt;- \"hola\"\n\n\n## This is Python calling an object from the R environment\nr.string.upper()\n\n'HOLA'\n\n\nIn Quarto, you can switch between R and Python, making the most of both languages. This feature is truly awesome! It dramatically enhances productivity.\nLet us say that your data-wrangling skills are quite good in R because of your mastery of the dplyr package. It may be that you are working on a project that requires Natural Language Processing libraries that exist in Python only. There is no need to make tough decisions. Quarto lets you use both!\n\n\nOther uses\nOf course, you can render fancy documents in Quarto even if equations or coding are not involved.\nYou could write your comprehensive examination or your prospectus in Quarto, and those documents will have a unique look that speaks volumes about your professionalization (trust me, demonstrating professionalization is critical in grad school!).\nYou could create your personal website in Quarto. Actually, this blog is made with Quarto. The GitHub repository is public, so feel free to fork it!\nThere is a detailed user guide to Quarto. You can visit it here. If you have questions about Quarto’s many functionalities, this is the first place you should look."
  },
  {
    "objectID": "posts/how_to_organize_your_computer/index.html#footnotes",
    "href": "posts/how_to_organize_your_computer/index.html#footnotes",
    "title": "How to organize your computer to work with data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI suggest that you get used to running GitHub commands from the Terminal in RStudio. Using the Terminal approximates better the real-world jobs in the data science industry.↩︎"
  }
]