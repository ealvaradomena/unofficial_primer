[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Photo: Chris Richards/University Communications\n\nSo you have been admitted to UA’s School of Government and Public Policy (SGPP). You must be proud of it!\nSGPP’s—Unofficial—Primer on Data Literacy and Open Science has posts covering three fundamental areas that you must master as a PhD student:\n\nOrganizing the computer to work with data and version control applications (e.g., GitHub).\nRendering professional documents in Quarto, including references, equations, code, visualizations, etc.\nNavigating UA’s Data Literacy and Open Science landscape.\n\nYou want to develop these skills as soon as possible. Trust me. They will make your doctoral journey more pleasant.\n\nBonus track—This website is deployed from a public GitHub repository. Feel free to fork it and use it as a model for your personal website."
  },
  {
    "objectID": "posts/professional_documents_with_quarto/index.html",
    "href": "posts/professional_documents_with_quarto/index.html",
    "title": "Rendering professional documents with Quarto",
    "section": "",
    "text": "Photo: Bob Demers/UA News\n\n\nProducing high-quality documents and reports is of paramount importance during your PhD life.\nEven if you are not minoring in methods, you must take a few statistics courses along your doctoral journey at the SGPP.\nMethods courses’ assignments are especially tricky as you must combine plain text, code, and results.\nIn general, instructors will expect to see, say, a fancy table with regression coefficients and other statistics. But you must also discuss your data, methods, and findings.\nOK. You’ll then look for a text editor. Microsoft Word or Google Docs may be your immediate choices.\nSo, you create a new Microsoft Word document, write some paragraphs about research design, insert screenshots of the relevant figures and tables, etc. \nScreenshots, however, do not look very professional…\nTo make things worse, instructors will often want you to showcase your programming thinking. Technical questions will be asked. How did you wrangle the data? How did you set the relevant variables? How did you fit the models?\nTherefore, you must add code to your prose.\nYou might be tempted to take screenshots of the R console and insert them into the document.\nOnce again, copy-pasting screenshots is not very professional…\nWe need tools that are better than Microsoft Word or Google Docs for high-quality scientific writing.\n\nA model Quarto document\nLuckily, we have Quarto documents!\nQuarto is an open-source software for scientific publishing. It is included in RStudio—You don’t have to install anything else.\nQuarto documents can combine plain text, code, and code output. No need for screenshots.\nPlus, Quarto documents can be rendered into multiple formats, including PDF, which makes them great for PhD assignments.\nYou can create Quarto documents in RStudio by clicking File &gt; New File &gt; Quarto Document.\nRStudio will open a Quarto document where you can write, program, and render into a professionally-looking PDF document.\nYou’ll see a block of YAML metadata at the top of the Quarto document. YAML metadata provides a lot of room for customization. You can modify those parameters at will.\nTo make things easier, I have granted you access to a GitHub repository with a model Quarto document ready to be rendered into a PDF file. Feel free to use this repository as a model for your grad school submissions.\nNotice that this GitHub repository follows the guidelines for working directory organization I listed in another blog post.\nAs you’ll see, Quarto makes it possible to do cool things such as printing both code and code output, managing references, and inserting \\(\\LaTeX\\) math.\n\n\nR or Python? Why not both!\nYou can even combine R and Python chunks in Quarto! Have a look:\n\n## This is R\ntoupper(\"hola\")\n\n[1] \"HOLA\"\n\n\n\n\n\n\n\n\nInstall package\n\n\n\nYou must install and load the reticulate package prior to running Python code: library(reticulate).\n\n\n\n## This is Python\n\"hola\".upper()\n\n'HOLA'\n\n\nFurthermore, you can call objects from an R environment while programming in a Python chunk, and vice-versa, which means that you can build bilingual workflows:\n\n## This is R\nstring &lt;- \"hola\"\n\n\n## This is Python calling an object from the R environment\nr.string.upper()\n\n'HOLA'\n\n\nSo you can switch between R and Python, making the most of both languages. This feature is truly awesome! It has dramatically enhanced my productivity.\nLet’s say that your data-wrangling skills are quite good in R because of your mastery of the dplyr package. It may be the case that you’re working on a project that requires Natural Language Processing (NLP) libraries that exist in Python only. Quarto lets you combine both languages! There’s no need to make tough decisions.\n\n\nOther uses\nOf course, you can render fancy documents in Quarto even if equations or programming are not involved.\nYou could write your comprehensive examination or your prospectus in Quarto. Those documents will have a unique look that speaks volumes about your professionalization (trust me, demonstrating professionalization is critical in grad school).\nAnd you could create your personal website in Quarto. Actually, this blog is made with Quarto—The GitHub repository is public, so please feel free to fork it.\nThere’s a detailed user guide to Quarto. You can visit it here. If you have questions about Quarto’s many uses, this is the first place you should look. \nI hope you fall in love with Quarto as much as I have."
  },
  {
    "objectID": "posts/how_to_organize_your_computer/index.html",
    "href": "posts/how_to_organize_your_computer/index.html",
    "title": "How to organize your computer to work with data",
    "section": "",
    "text": "Photo: Chris Richards/University Communications\n\n\nYour computer should not be a mess.\nTo work efficiently with data, you want to organize your computer in a certain way. The same applies to version control. To work efficiently with version control applications (don’t panic if you ignore what version control is—We’ll cover it soon), you want to organize your computer in a certain way.\nOrganizing your folders and files in that certain way will make everything much easier for you.\n\nRStudio projects and working directories\nYou’ll crunch numbers on a daily basis during your doctoral studies. Most SGPP folks are versed in R, a programming language for data analysis.\nR users organize their work around a thing called RStudio projects. We’ll show how to create RStudio projects soon, but let’s begin by saying that RStudio projects are files with a particular extension: .Rproj files.\nR users are also familiar with the concept of working directory. A working directory is just a folder on your computer where an .Rproj file is located.\nTo be precise, the working directory is the folder where you should keep all the files (e.g., the CSV file containing some survey data), scripts (e.g., the text files where you write and save your code), and any input that is relevant to the RStudio project you’re working on.\nOnce again, the working directory is just a folder with an RStudio project inside. The RStudio project, an .Rproj file, and the working directory, a folder, share the same name.\nR has a function that prints the current working directory’s path: getwd().\nIf you execute the getwd() function in the R console, R would print the path of the current working directory, say, /Users/edwinalvarado/Documents/r_projects/unofficial_primer is the folder where I keep all the elements that are required to render this website, which is itself an RStudio project under the name unofficial_primer.Rproj.\n\n\nComputer organization\nRegarding folders and files organization, you should create two main folders on your computer, namely, r_projects and github_projects.\nYou can locate both folders right in your Documents folder. In my computer, these two folder paths look something like this:\n\n/Users/edwinalvarado/Documents/r_projects.\n/Users/edwinalvarado/Documents/github_projects.\n\nYou should gather all RStudio projects’ working directories (i.e., folders) in the r_projects folder.\nIn r_projects, you want to create one specific working directory (i.e., one specific folder) for each course or project (paper, study notes, dissertation, etc.) you work on.\nAt some point, you’ll have a large number of working directories:\n\n/Users/edwinalvarado/Documents/r_projects/pol601.\n/Users/edwinalvarado/Documents/r_projects/pol602.\n/Users/edwinalvarado/Documents/r_projects/pol603.\n/Users/edwinalvarado/Documents/r_projects/second_year_paper.\n/Users/edwinalvarado/Documents/r_projects/comps.\n/Users/edwinalvarado/Documents/r_projects/prospectus.\n\nAnd so on… Hopefully, you’ll become this systematic and professional when organizing your computer!\nThe RStudio projects in the r_projects folder are local; that is, they exist in—and only in—your computer.\nOn the other hand, if you want to load an RStudio project to GitHub so that you can share it with others or track changes using GitHub’s version control tools, the working directory in question should instead go to the github_projects folder.\n\n\nCreating RStudio projects\nTo create an RStudio project—and, thus, a working directory—for, say, POL 601, you follow these steps:\n\nOpen RStudio.\nClick on File &gt; New Project, which will open a new window.\nSelect New Directory.\nChoose an appropriate directory_name (use underscores instead of white spaces), say, pol_601 or pol601.\nClick on Browse and make sure to set the r_projects folder in the Create project as subdirectory of field.\nClick on Create Project.\n\nBy completing the steps above, you’ll create a new RStudio project and, hence, a new working directory in r_projects.\nBear in mind that a working directory is just a folder containing an RStudio project.\nIn my case, as the example goes, the working directory’s path would be /Users/edwinalvarado/Documents/r_projects/pol601. There, in that folder, I’ll find a pol601.Rproj file, which is an RStudio project.\nThe next time I have to do some programming related to POL 601, I will simply click on its corresponding RStudio project: pol601.Rproj. RStudio will then open a new session rooted in the working directory corresponding to POL 601.\nImportantly, the good habit of organizing our work around RStudio projects guarantees that we don’t need to worry about manually setting the working directory, which tends to be taxing for most beginners.\n\n\n\n\n\n\nMore on RStudio projects?\n\n\n\nHere’s a reference with further details about RStudio projects.\n\n\nAnd you’ll simply repeat this tutorial for every course or project that comes along the way in your new life as an R user.\nTo sum up, we have learned that R users organize all their programming work around RStudio projects. We described how to create RStudio projects. We showed that creating an RStudio project results in a new working directory (i.e., a new folder) that we should locate in the r_projects folder to keep them all together.\nIt is key to notice that the new working directory must also have a certain structure. You should create at least these three sub-folders:\n\nr_projects/pol601/data, where you store the raw data.\nr_projects/pol601/scripts, where you store the text files containing all the programming that loads, wrangles, tidies, models, or visualizes the data.\nr_projects/pol601/output, where you store wrangled data, model output (modeling data might be time-consuming, so you don’t want to re-run models again and again), visualizations, etc.\n\nWhen you create a Quarto document to produce a PDF report (I have a post about it), instead of creating a sub-folder for reports, I suggest keeping that .qmd file right at the root of the working directory.\nI shared a model working directory via GitHub. It looks like this:\n\n\n\nA model working directory\n\n\nAs you see, rendering a PDF document like assignment_1.pdf yielded a host of ancillary files with the same prefix, assignment_1, making the working directory seem packed. However, I still suggest that beginners keep the .qmd file at the root—rather than moving it to a sub-folder—for convenience when setting relative paths within the Quarto document. I don’t want to get technical about it, so please just trust me!\nFinally, it is sensible to avoid file deletion. You never know whether that trashy script you’re about to delete will have a last dance in the future. Instead of deleting, you create an old sub-folder in the same folder where the junk file is and move it there along with any other old stuff.\n\n\nCreating GitHub repositories\nOften, you want your RStudio projects to be GitHub repositories as well. Why do we care about GitHub this much? Because GitHub is such a great asset!\nGitHub is a version control tool, meaning that you can recover previous coding versions. Because GitHub is in the cloud, you don’t have to stress about your computer getting stolen or messed up. All your programming is safe at GitHub! Furthermore, GitHub is handy to share code with instructors, co-authors, and colleagues.\nWe all love GitHub! It has a relatively steep learning curve, though.\nTo keep all your GitHub repositories together, as mentioned earlier, you must create a folder on your computer, github_projects. \nOf course, you must also create a GitHub account and download GitHub Desktop.11 I suggest that you get used to running GitHub commands in the RStudio’s Terminal. Using the Terminal approximates better the real-world jobs in the data science industry.\n\n\n\n\n\n\nIntro to GitHub\n\n\n\nYou need a solid introduction to Git and GitHub. My recommended resources, here and here.\n\n\nThe next steps are to create a GitHub repository and populate it with an RStudio project:\n\nLog in to the GitHub website.\nClick on your profile picture (upper right corner).\nClick on Your repositories.\nClick on New (a green button) to create a new repository.\nChoose an appropriate name (say, pol601) and make sure that the repository is set to be private.\nClick on Create repository, which will lead you to the main page of the new repository.\nClick on Code (a green button).\nClick on Local.\nClick on Open with GitHub Desktop, which will lead you to GitHub Desktop.\nIn GitHub Desktop, click on Browse and make sure that the repository will be located in the github_projects folder.\n\nThe GitHub repository now exists locally on your computer and, more specifically, is located in the github_projects folder.\nNow, it is time to populate that github_projects/pol601 folder with an RStudio project.\nSo you follow the following steps:\n\nOpen RStudio.\nClick on File &gt; New Project, which will open a new window.\nSelect Existing Directory (instead of New Directory, which we chose when creating an RStudio on your computer only).\nClick on Browse and make sure to choose the github_projects/pol601 folder (an existing directory as you created it in advance).\nClick on Create Project.\n\nThus, you’ll have created a new folder in github_projects that is both an RStudio project and a GitHub repository.\nJob done! You are all set to program great stuff and exploit GitHub’s strenghts in version control and cloud sharing. Here’s where you need a solid Intro to GitHub."
  },
  {
    "objectID": "posts/ua_data_literacy_open_science_landscape/index.html",
    "href": "posts/ua_data_literacy_open_science_landscape/index.html",
    "title": "UA’s Data Literacy and Open Science Landscape",
    "section": "",
    "text": "Photo: Dean Kelly/SkyPod Images\n\n\nBeing a first-year PhD student is not the easiest. You’ll have to learn lots of new stuff in no time, and it is OK to feel anxious about it.\nTo me, it is sensible to invest serious time in honing the programming skill set. A decent fluency in R or Python can make your doctoral journey way more pleasant. \nBut programming is not the only flank you have to protect in the years to come. There are many other technicalities that you must pick up as quick as possible.\nYou’ll hear about \\(\\LaTeX\\). Many of your future co-authors write their manuscripts in \\(\\LaTeX\\), so you will suffer the misery of rendering \\(\\LaTeX\\) documents with no previous knowledge of it…\nYou’ll hear about GitHub. Version control tools are a must for collaborative work, so you’ll soon be grappling with all these arcane GitHub commands… \nYou’ll hear about the Unix shell. Advanced tasks like interacting with UA’s High Performance Computing (HPC) demand some computational dexterity, so you’ll need to master how humans communicate with computers via the command line…\nWhere to start?\n\nOpen Science\nEvery skill mentioned above pertains to Open Science, a hugely relevant paradigm in scientific research nowadays. The sooner you learn about Open Science, the better.\nI pretty much like the definition coined by Jeffrey Gillan (UA’s Data Science Institute):\n\n\n“A series of reforms that interrogate every step in the research life cycle to make it more efficient, powerful and accountable in our emerging digital society.”\n\nOpen Science interrogates the way we do science. UNESCO’s definition is wordier but points in the same direction:\n\n“Open Science is defined as an inclusive construct that combines various movements and practices aiming to make multilingual scientific knowledge openly available, accessible and reusable for everyone, to increase scientific collaborations and sharing of information for the benefits of science and society, and to open the processes of scientific knowledge creation, evaluation and communication to societal actors beyond the traditional scientific community.”\n\nIn a nutshell, we—scientists—do science, but we do a very particular type of science: reproducible science.\nReproducibility means that our data and code are accessible, transparent, and executable. Importantly, reproducibility allows others to fully replicate our work’s results.\nSo we do not merely publish our research findings. Rather, we share all the research materials and explicitly say how we utilized them.\nOf course, Open Science does not happen by accident. We must take purposeful actions across numerous areas to comply with Open Science standards. \nWe must excel at documentation. Our code must be well-annotated, and each step leading to our conclusions must be documented. We must also provide guidelines for code execution. Open-source applications like OSF are great for documentation. In the context of GitHub repositories, a README file should be included with a detailed overview of the project workflow.\nWe must excel at project management. Our code must be contained in a GitHub repository with appropriate version control functionalities, and we must also share every necessary input to execute the code. Of course, project management includes data management. UA provides access to the DMPTool to prepare data management plans that observe funding agencies’ requirements.\nWe must excel at data infrastructure. Our data and other research materials must be made accessible through digital storage platforms; any third person should be able to understand how raw data inputs turn into research outputs. The conditions for gathering, sharing, and archiving data must be clearly stated. Moreover, the data must be Findable, Accessible, Interoperable, and Reusable (see: FAIR Principles). UA’s institutional repository is known as ReDATA.\nWe must excel at communication. Our publications must follow the best practices and standards in scientific writing, which involves using the correct software. Overleaf is an online \\(\\LaTeX\\) editor for collaborative and real-time writing. Quarto allows you to combine formatted text, code chunks, code output, \\(\\LaTeX\\) conventions, and references. Read my blog post on Quarto documents.\n\n\nUA’s excellent data literacy ecosystem\nAs I mentioned earlier, you’ll have so much ground to cover in the coming years! It is easy to get overwhelmed.\nThe good news is that UA’s ecosystem supplies so many opportunities to hone your computational skills while engaging with folks doing very cool stuff in “this R1 institution that, quite literally, puts things into space” (as Professor Peter A. Jansen said in one lecture).\nHere, my top recommendations to make the most of the UA’s Data Literacy and Open Science landscape:\n\nTake advantage of University Libraries’ Data Cooperative\nUniversity Libraries’ Data Cooperative organizes weekly workshops during the semester. These lovely workshops cover everything from introductory programming to machine learning methods, data management, data visualization, etc. Plus, the instructor of these R workshops, Jeff Olivier, is such a great guy.\nThe Data Cooperative holds open office hours, where you can bring that ugly line of code that is not running, as well as workshops on supported platforms such as the DMPTool, OSF, and ReDATA, which I mentioned previously in this post. Upcoming events, here.\n\n\nAttend Data Science Institute’s events\nSubscribe to the Data Science Institute’s email list. It is the best channel for information about data science events held across the campus. Have a look at the calendar!\nThe Data Science Institute also has an official newsletter, The Data Drip, and leads great outreach projects such as Data Science Ambassadors, Data Science Fellows, or Roots for Resilience.\n\n\nGet in touch with Data Science Ambassadors\nThe College of Social & Behavioral Sciences likely has a Data Science Ambassador who can give you a hand with your programming questions. You can make an appointment at any time.\nOnce you have gained some experience, nominate yourself to serve as a Data Science Ambassador.\n\n\nHave a look at Kelsey Gonzalez’s R programming course\nSociologist Kelsey Gonzalez earned her PhD from UA. A former Data Science Ambassador, Kelsey is now a Lead Data Scientist and AI Product Manager in the Chief Analytics Office at IBM, demonstrating that social scientists can land excellent jobs in the industry. \nFurthermore, Kelsey developed an excellent course: R programming with Tidyverse. It is free and available on YouTube. You definitely want to have a look!\n\n\nExploit UA’s education partnerships\nThe Data Science Ambassadors program gives you access to the Carpentries Instructor Certification. The Roots for Resilience program provides the Foundational Open Science Skills (FOSS) workshop series.\nThese education partnerships are a massive asset. Take advantage of it.\n\n\nPursue the Computational Social Science Graduate Certificate\nTaking courses beyond the SGPP will give you a more substantial background. It is not to say that our methods classes are bad. Quite the opposite, our methods sequence is pretty good and provides you with the foundations to take courses in computer science, geography, statistics, and so on.\nThe Computational Social Science Graduate Certificate is a great way to turn all those credits into a nice addition to your CV. Pursue it.\n\n\nMaster the High Performance Computing\nUA has enormous computational power. We, UA grad students, can run jobs in the High Performance Computing. This infrastructure is nothing to sneeze at. Use it to leverage your work.\nThis very good collection of videos will introduce you to UA’s supercomputers.\nAm I missing something? Let me know."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "UA’s Data Literacy and Open Science Landscape\n\n\n\n\n\n\n\ndata literacy\n\n\nopen science\n\n\nUA\n\n\n\n\n\n\n\n\n\n\n\nNov 16, 2024\n\n\nEdwin Alvarado-Mena\n\n\n\n\n\n\n  \n\n\n\n\nRendering professional documents with Quarto\n\n\n\n\n\n\n\nQuarto\n\n\ncode\n\n\nLaTeX\n\n\n\n\n\n\n\n\n\n\n\nNov 15, 2024\n\n\nEdwin Alvarado-Mena\n\n\n\n\n\n\n  \n\n\n\n\nHow to organize your computer to work with data\n\n\n\n\n\n\n\nworking directory\n\n\nRStudio project\n\n\nGitHub\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2024\n\n\nEdwin Alvarado-Mena\n\n\n\n\n\n\nNo matching items"
  }
]